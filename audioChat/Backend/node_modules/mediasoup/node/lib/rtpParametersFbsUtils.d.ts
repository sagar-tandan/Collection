import * as flatbuffers from 'flatbuffers';
import type { RtpParameters, RtpCodecParameters, RtcpFeedback, RtpEncodingParameters, RtpHeaderExtensionUri, RtpHeaderExtensionParameters } from './rtpParametersTypes';
import { RtcpFeedback as FbsRtcpFeedback, RtpCodecParameters as FbsRtpCodecParameters, RtpEncodingParameters as FbsRtpEncodingParameters, RtpHeaderExtensionParameters as FbsRtpHeaderExtensionParameters, RtpHeaderExtensionUri as FbsRtpHeaderExtensionUri, RtpParameters as FbsRtpParameters } from './fbs/rtp-parameters';
export declare function serializeRtpParameters(builder: flatbuffers.Builder, rtpParameters: RtpParameters): number;
export declare function serializeRtpEncodingParameters(builder: flatbuffers.Builder, rtpEncodingParameters?: RtpEncodingParameters[]): number;
export declare function serializeParameters(builder: flatbuffers.Builder, parameters: any): number[];
export declare function parseRtcpFeedback(data: FbsRtcpFeedback): RtcpFeedback;
export declare function parseParameters(data: any): any;
export declare function parseRtpCodecParameters(data: FbsRtpCodecParameters): RtpCodecParameters;
export declare function rtpHeaderExtensionUriFromFbs(uri: FbsRtpHeaderExtensionUri): RtpHeaderExtensionUri;
export declare function rtpHeaderExtensionUriToFbs(uri: RtpHeaderExtensionUri): FbsRtpHeaderExtensionUri;
export declare function parseRtpHeaderExtensionParameters(data: FbsRtpHeaderExtensionParameters): RtpHeaderExtensionParameters;
export declare function parseRtpEncodingParameters(data: FbsRtpEncodingParameters): RtpEncodingParameters;
export declare function parseRtpParameters(data: FbsRtpParameters): RtpParameters;
//# sourceMappingURL=rtpParametersFbsUtils.d.ts.map